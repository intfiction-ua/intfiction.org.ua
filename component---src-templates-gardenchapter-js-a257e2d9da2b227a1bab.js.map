{"version":3,"file":"component---src-templates-gardenchapter-js-a257e2d9da2b227a1bab.js","mappings":"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","sources":["webpack://intfiction.org.ua/./src/components/garden-dates.js","webpack://intfiction.org.ua/./src/components/garden-item.js","webpack://intfiction.org.ua/./src/components/garden-list.js","webpack://intfiction.org.ua/./src/templates/gardenchapter.js"],"sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { formatDateM } from '../utils';\n\nconst GardenYear = ({ dates, activeClassName }) => dates.map((item) => (\n  <li key={item.fieldValue}>\n    <Link\n      to={`/gardenchapter/${item.fieldValue}/`}\n      key={item.fieldValue}\n      activeClassName={activeClassName}\n    >\n      {formatDateM(item.fieldValue)} <span className=\"tag\">{item.totalCount}</span>\n    </Link>\n  </li>\n));\n\nconst GardenDatesList = ({ activeClassName }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(filter: {fields: {nodeType: {eq: \"garden\"}}}, limit: 2000) {\n        group(field: {fields: {yyyymm: SELECT}}) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n  const dates = data.allMarkdownRemark.group.sort((a, b) => (a.fieldValue < b.fieldValue ? 1 : -1));\n  const years = dates.reduce((accumulator, item) => {\n    const key = item.fieldValue.substring(0, 4);\n    if (!accumulator[key]) {\n      accumulator[key] = [];\n    }\n    accumulator[key].push(item);\n    return accumulator;\n  }, {});\n  const yearList = Object.keys(years).sort((a, b) => (a.fieldValue < b.fieldValue ? 1 : -1));\n\n  return (\n    <ul className=\"menu-list is-size-6\">\n      <li>\n        <Link\n          to=\"/garden\"\n          activeClassName={activeClassName}\n        >\n          Всі пости\n        </Link>\n      </li>\n      {\n        yearList.map((year) => (\n          <>\n            <li key={year} style={{ padding: '0.75em', backgroundColor: '#EEEEEE' }}>\n              <b>{year}</b>\n            </li>\n            <GardenYear dates={years[year]} activeClassName={activeClassName} />\n          </>\n        ))\n      }\n    </ul>\n  );\n};\n\nexport default GardenDatesList;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { formatDate } from '../utils';\n\nconst GardenItem = ({ fields, html, hideHeader }) => {\n  const itemDate = formatDate(fields.postdate);\n  let header;\n  if (!hideHeader) {\n    header = (\n      <header className=\"card-header\">\n        <Link to={fields.slug} className=\"hoverable_link\">\n          <p className=\"card-header-title\">\n            {itemDate}\n          </p>\n        </Link>\n      </header>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"card\">\n        {header}\n        <div className=\"card-content\">\n          <div className=\"is-family-secondary content\">\n            <div dangerouslySetInnerHTML={{ __html: html }} />\n          </div>\n        </div>\n      </div>\n      <br />\n    </>\n  );\n};\n\nexport default GardenItem;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport GardenItem from './garden-item';\nimport { formatDateM } from '../utils';\n\nconst GardenList = ({ items, context }) => (\n  <>\n    <div className=\"block content mx-4\">\n      <Link to=\"/garden/\" className=\"hoverable_link\">\n        <h2 className=\"title\">\n          Сад переплетених стежок{context.yyyymm && `, ${formatDateM(context.yyyymm)}`}\n        </h2>\n      </Link>\n    </div>\n    {/* Your post list here. */\n      items.map(\n        (item) => (\n          <GardenItem\n            fields={item.node.fields}\n            html={item.node.html}\n            key={item.node.fields.slug}\n          />\n        ),\n      )\n    }\n  </>\n);\n\nexport default GardenList;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { formatDateM } from '../utils';\nimport Layout from '../layout';\nimport SEO from '../components/seo';\nimport GardenDatesList from '../components/garden-dates';\nimport GardenList from '../components/garden-list';\n\nconst GardenChapter = ({ pageContext, data }) => (\n  <Layout>\n    <main>\n      <SEO title={`Сад переплетених стежок, ${formatDateM(pageContext.yyyymm)}`} />\n      <div className=\"columns\">\n        <div className=\"column\">\n          <GardenList\n            items={data.allMarkdownRemark.edges}\n            context={pageContext}\n          />\n        </div>\n        <div className=\"column is-3\">\n          <GardenDatesList context={pageContext} />\n        </div>\n      </div>\n      <br />\n    </main>\n  </Layout>\n);\n\nexport default GardenChapter;\n\nexport const pageQuery = graphql`\n  query ($yyyymm: Date) {\n    allMarkdownRemark(\n      filter: {fields: {nodeType: {eq: \"garden\"}, yyyymm: {eq: $yyyymm}}}\n      sort: {fields: {postdate: DESC}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            postdate\n            yyyymm\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"names":["GardenYear","_ref","dates","activeClassName","map","item","React","key","fieldValue","Link","to","formatDateM","className","totalCount","_ref2","years","useStaticQuery","allMarkdownRemark","group","sort","a","b","reduce","accumulator","substring","push","yearList","Object","keys","year","style","padding","backgroundColor","fields","html","hideHeader","itemDate","formatDate","postdate","header","slug","dangerouslySetInnerHTML","__html","items","context","yyyymm","GardenItem","node","pageContext","data","Layout","SEO","title","GardenList","edges","GardenDatesList"],"sourceRoot":""}