{"version":3,"file":"component---src-templates-tag-js-aeeb38f0fed5435a76bc.js","mappings":"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","sources":["webpack://intfiction.org.ua/./src/components/article-list.js","webpack://intfiction.org.ua/./src/components/categories-list.js","webpack://intfiction.org.ua/./src/components/tags-list.js","webpack://intfiction.org.ua/./src/components/article-browser.js","webpack://intfiction.org.ua/./src/components/item-category.js","webpack://intfiction.org.ua/./src/components/item-tag.js","webpack://intfiction.org.ua/./src/components/article-info.js","webpack://intfiction.org.ua/./src/components/pagination.js","webpack://intfiction.org.ua/./src/templates/tag.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport ArticleInfo from './article-info';\n\n/*\npath: postEdge.node.fields.slug,\ntags: postEdge.node.frontmatter.tags,\ncategories: postEdge.node.frontmatter.categories,\ncover: postEdge.node.frontmatter.cover,\ntitle: postEdge.node.frontmatter.title,\ndate: postEdge.node.frontmatter.date,\nexcerpt: postEdge.node.excerpt,\n*/\n\nconst ArticleListItem = ({ fields, frontmatter, excerpt }) => (\n  <div className=\"block content\" key={frontmatter.title}>\n    <div className=\"is-family-secondary mx-4\">\n      <Link to={fields.slug} className=\"hoverable_link\">\n        <h2 className=\"title\">{frontmatter.title}</h2>\n      </Link>\n      <ArticleInfo\n        date={frontmatter.date}\n        categories={fields.categories}\n        tags={fields.tags}\n      />\n      <p>\n        {excerpt}\n        &nbsp;\n        <Link to={fields.slug} className=\"button is-light is-small\">\n          &gt;&gt;&gt;\n        </Link>\n      </p>\n    </div>\n    <hr />\n  </div>\n);\n\nconst ArticleList = ({ articles }) => (\n  <>\n    {/* Your post list here. */\n      articles.map((item) => ArticleListItem(item.node))\n    }\n  </>\n);\n\nexport default ArticleList;\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { convert2translit } from '../utils';\n\nconst renderCategories = (categories, activeClassName) => (\n  categories.sort((a, b) => a.fieldValue.localeCompare(b.fieldValue, 'uk-UA'))\n    .map((category) => (\n      <li key={category.fieldValue}>\n        <Link\n          to={`/category/${convert2translit(category.fieldValue)}/`}\n          activeClassName={activeClassName}\n        >\n          {category.fieldValue} <span className=\"tag\">{category.totalCount}</span>\n        </Link>\n      </li>\n    ))\n);\n\nconst CategoriesList = ({ activeClassName }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: {fields: {categories: SELECT}}) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <p className=\"menu-label\">\n        Категорії\n      </p>\n      <ul className=\"menu-list is-size-7\">\n        {renderCategories(data.allMarkdownRemark.group, activeClassName)}\n      </ul>\n    </>\n  );\n};\n\nexport default CategoriesList;\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { convert2translit } from '../utils';\n\nconst renderTags = (tags, activeClassName) => (\n  tags.sort((a, b) => a.fieldValue.localeCompare(b.fieldValue, 'uk-UA'))\n    .map((tag) => (\n      <li key={tag.fieldValue}>\n        <Link\n          to={`/tag/${convert2translit(tag.fieldValue)}/`}\n          activeClassName={activeClassName}\n        >\n          {tag.fieldValue} <span className=\"tag\">{tag.totalCount}</span>\n        </Link>\n      </li>\n    ))\n);\n\nconst TagsList = ({ activeClassName }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: {fields: {tags: SELECT}}) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return (\n    <>\n      <p className=\"menu-label\">\n        Теги\n      </p>\n      <ul className=\"menu-list is-size-7\">\n        {renderTags(data.allMarkdownRemark.group, activeClassName)}\n      </ul>\n    </>\n  );\n};\n\nexport default TagsList;\n","import React from 'react';\n\nimport ArticleList from './article-list';\nimport Pagination from './pagination';\nimport CategoriesList from './categories-list';\nimport TagsList from './tags-list';\n\nconst ArticleBrowser = ({ data, context }) => (\n  <>\n    <div className=\"columns\">\n      <div className=\"column\">\n        <ArticleList articles={data} />\n        <Pagination context={context} />\n      </div>\n      <div className=\"column is-3\">\n        <CategoriesList context={context} />\n        <TagsList context={context} />\n      </div>\n    </div>\n    <br />\n  </>\n);\n\nexport default ArticleBrowser;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { convert2translit } from '../utils';\n\nconst Category = (name) => (\n  <span className=\"tag is-primary is-light\" key={name}>\n    <Link to={`/category/${convert2translit(name)}/`}>{name}</Link>\n  </span>\n);\n\nexport default Category;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport { convert2translit } from '../utils';\n\nconst Tag = (name) => (\n  <span className=\"tag\" key={name}>\n    <Link to={`/tag/${convert2translit(name)}/`}>{name}</Link>\n  </span>\n);\n\nexport default Tag;\n","import React from 'react';\nimport { formatDate } from '../utils';\n\nimport Category from './item-category';\nimport Tag from './item-tag';\n\nconst ArticleInfo = ({ date, categories, tags, author, isTranslation }) => (\n  <div className=\"level is-family-primary\">\n    <div className=\"level-left\">\n      <div className=\"level-item\">\n        {isTranslation ? '' : <>{author}<br /></>}\n        {formatDate(date)}\n      </div>\n    </div>\n    <div className=\"level-right\">\n      <div className=\"level-item tags\">\n        {categories.map(Category)}\n        {tags.map(Tag)}\n      </div>\n    </div>\n  </div>\n);\n\nexport default ArticleInfo;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Pagination = ({ context }) => (\n  <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\n    <Link className=\"pagination-previous\" to={context.previousPagePath}>&lt;</Link>\n    <ul className=\"pagination-list\">\n      <li>\n        {context.humanPageNumber}\n        /\n        {context.numberOfPages}\n      </li>\n    </ul>\n    <Link className=\"pagination-next\" to={context.nextPagePath}>&gt;</Link>\n  </nav>\n);\n\nexport default Pagination;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Layout from '../layout';\nimport SEO from '../components/seo';\nimport ArticleBrowser from '../components/article-browser';\n\nconst ArticlesByTag = ({ pageContext, data }) => (\n  <Layout>\n    <main>\n      <SEO title={`Статті за тегом \"${pageContext.tag}\"`} />\n      <div className=\"content mx-4\">\n        <h1 className=\"title\"><Link to=\"/articles/\">Статті</Link> за тегом “{pageContext.tag}”</h1>\n        <hr />\n      </div>\n      <ArticleBrowser\n        data={data.allMarkdownRemark.edges}\n        context={pageContext}\n      />\n    </main>\n  </Layout>\n);\n\nexport default ArticlesByTag;\n\nexport const pageQuery = graphql`\nquery TagPage($tag: String, $skip: Int!, $limit: Int!) {\n  allMarkdownRemark(\n    filter: {fields: {nodeType: {eq: \"article\"}, tags: {in: [$tag]}}}\n    sort: {frontmatter: {date: DESC}}\n    skip: $skip\n    limit: $limit\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n          tags\n          categories\n        }\n        excerpt\n        frontmatter {\n          title\n          date\n        }\n      }\n    }\n  }\n}\n`;\n"],"names":["_ref2","articles","React","map","item","_ref","fields","frontmatter","excerpt","className","key","title","Link","to","slug","ArticleInfo","date","categories","tags","ArticleListItem","node","activeClassName","data","useStaticQuery","renderCategories","sort","a","b","fieldValue","localeCompare","category","convert2translit","totalCount","allMarkdownRemark","group","renderTags","tag","context","ArticleList","Pagination","CategoriesList","TagsList","name","author","isTranslation","formatDate","Category","Tag","role","previousPagePath","humanPageNumber","numberOfPages","nextPagePath","pageContext","Layout","SEO","ArticleBrowser","edges"],"sourceRoot":""}